// <auto-generated />
using LevelsCreator;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LevelsCreator.Migrations
{
    [DbContext(typeof(LevelsApplicationContext))]
    [Migration("20211022085415_MoveAudioFileNameToWord")]
    partial class MoveAudioFileNameToWord
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("ICanRead.Core.Model.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("entities");
                });

            modelBuilder.Entity("ICanRead.Core.Model.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Game")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lang")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("ICanRead.Core.Model.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Locked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameTypeId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("ICanRead.Core.Model.LevelWord", b =>
                {
                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LevelId", "WordId");

                    b.HasIndex("WordId");

                    b.ToTable("LevelWords");
                });

            modelBuilder.Entity("ICanRead.Core.Model.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AudioFileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Complexity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lang")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("ICanRead.Core.Model.Level", b =>
                {
                    b.HasOne("ICanRead.Core.Model.GameType", "GameType")
                        .WithMany("Levels")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("ICanRead.Core.Model.LevelWord", b =>
                {
                    b.HasOne("ICanRead.Core.Model.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICanRead.Core.Model.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("ICanRead.Core.Model.Word", b =>
                {
                    b.HasOne("ICanRead.Core.Model.Entity", "Entity")
                        .WithMany("Words")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("ICanRead.Core.Model.Entity", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("ICanRead.Core.Model.GameType", b =>
                {
                    b.Navigation("Levels");
                });
#pragma warning restore 612, 618
        }
    }
}
